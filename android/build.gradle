/*
 * Copyright (C) 2017 Raul Hernandez Lopez @raulh82vlc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
//apply plugin: 'jacoco'
apply plugin: 'checkstyle'


android {
    compileSdkVersion parent.ext.androidCompileSdkVersion
    buildToolsVersion parent.ext.androidBuildToolsVersion

    defaultConfig {
        applicationId parent.ext.androidApplicationId
        minSdkVersion parent.ext.androidMinSdkVersion
        targetSdkVersion parent.ext.androidTargetSdkVersion
        versionCode parent.ext.androidVersionCode
        versionName parent.ext.androidVersionName
    }

    testOptions {
        unitTests.returnDefaultValues = true
//        unitTests.all {
//            jacoco {
//                includeNoLocationClasses = true
//            }
//        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        /**
         * Set whether lint should check for fatal errors during release builds. Default is true.
         * If issues with severity "fatal" are found, the release build is aborted.
         */
        checkReleaseBuilds false
        // if true, only report errors
        ignoreWarnings true
        // set to true to turn off analysis progress reporting by lint
        quiet true
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            buildConfigField "String", "BASE_URL_API", '"http://gateway.marvel.com/v1/public/"'
            buildConfigField "String", "API_PUBLIC_KEY", '"6a7ed890b4b941a925202a5630d5b162"'
            buildConfigField "String", "API_PRIVATE_KEY", '"0f1d0fdf46a0bf32f962b0b9997233c0395cdf8e"'
            debuggable true
//            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            buildConfigField "String", "BASE_URL_API", '"http://gateway.marvel.com/v1/public/"'
            buildConfigField "String", "API_PUBLIC_KEY", '"6a7ed890b4b941a925202a5630d5b162"'
            buildConfigField "String", "API_PRIVATE_KEY", '"0f1d0fdf46a0bf32f962b0b9997233c0395cdf8e"'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    compile project(':domain')
    compile parent.ext.libButterknife
    compile parent.ext.libSupportAnnotations
    compile parent.ext.libAppCompat
    compile parent.ext.libDesignCompat
    compile parent.ext.libRecyclerView
    compile parent.ext.libCardView
    provided parent.ext.libAnnotations
    provided parent.ext.libDaggerCompiler
    compile parent.ext.libDagger
    compile parent.ext.libRetrofit
    compile parent.ext.libOkHttp
    compile parent.ext.libTimber
    compile parent.ext.libPicasso
    testCompile parent.ext.testingMockito
    testCompile parent.ext.testingJUnit
    androidTestCompile parent.ext.testingInstrumentationRunner
    androidTestCompile parent.ext.testingRules
    androidTestCompile parent.ext.testingSupportAnnotations
}

task checkstyle(type: Checkstyle) {
    configFile file('../config/checkstyle/checkstyle.xml')
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec"
//    ])
//}

